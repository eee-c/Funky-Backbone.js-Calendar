h1= title

table#calendar
  thead
    tr
      th S
      th M
      th T
      th W
      th T
      th F
      th S
  tr#week0
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week1
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week2
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week3
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week4
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week5
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday

#add-dialog(title="Add calendar appointment")
  h2.startDate
  p title
  p
    input.title(type="text", name="title")
  p description
  p
    input.description(type="text", name="description")

script
  $(function() {
    $('#add-dialog').dialog({
      autoOpen: false,
      modal: true,
      buttons: [
        { text: "OK",
          class: "ok",
          click: function() { $(this).dialog("close"); } },
        { text: "Cancel",
          click: function() { $(this).dialog("close"); } }
      ]
    });
  });

#edit-dialog(title="Edit calendar appointment")
  h2.startDate
  input.
  p title
  p
    input.title(type="text", name="title")
  p description
  p
    input.description(type="text", name="description")

script
  $(function() {
    $('#edit-dialog').dialog({
      autoOpen: false,
      modal: true,
      buttons: [
        { text: "OK",
          class: "ok",
          click: function() { $(this).dialog("close"); } },
        { text: "Cancel",
          click: function() { $(this).dialog("close"); } }
      ]
    });
  });

script
  $(add_dates_to_calendar);

  function ISODateString(d) {
    function pad(n) {return n<10 ? '0'+n : n}
    return d.getFullYear()+'-'
      + pad(d.getMonth()+1)+'-'
      + pad(d.getDate())
  }

  function add_dates_to_calendar() {
    var today = new Date(),
        firstOfTheMonth = new Date(today.getFullYear(), today.getMonth(), 1),
        firstSunday = new Date(firstOfTheMonth.getTime() -
                               firstOfTheMonth.getDay()*24*60*60*1000);

    var date = firstSunday;
    _([0,1,2,3,4,5]).each(function(week) {
      var week_el = $('#week' + week),
          day_elements = week_el.find('td');

      _([0,1,2,3,4,5,6]).each(function(day) {
        var day_element = day_elements[day],
            other_month = (date.getMonth() != today.getMonth()),
            html = '<span class="day-of-month">' + date.getDate() + '</span>';

        $(day_element).
          html(html).
          attr('id', ISODateString(date)).
          addClass(other_month ? 'other-month' : '');

        date = new Date(date.getTime() + 24*60*60*1000);
      });
    });

    // remove whole week from next month
    var week5_other_month = _($('#week5').find('td')).all(function(el) {
      return $(el).hasClass('other-month')
    });
    if (week5_other_month) { $('#week5').hide() }
  }

script
  $(function() {
    window.Appointment = Backbone.Model.extend({
      urlRoot : '/appointments',
      initialize: function(attributes) { this.id = attributes['_id']; },
      save: function() {
        Backbone.Model.prototype.save.call(this, {
          headers: {'If-Match': this.get("rev")}
        });
      },
      destroy: function() {
        Backbone.Model.prototype.destroy.call(this, {
          headers: {'If-Match': this.get("rev")}
        });
      },
      get: function(attribute) {
        return Backbone.Model.prototype.get.call(this, attribute) ||
               Backbone.Model.prototype.get.call(this, "_" + attribute);
      }
    });

    window.AppointmentList = Backbone.Collection.extend({
      model: Appointment,
      url: '/appointments',
      parse: function(response) {
        return _(response.rows).map(function(row) { return row.doc ;});
      }
    });

    window.Appointments = new AppointmentList;

    window.AppointmentView = Backbone.View.extend({
      template: _.template($('#calendar-appointment-template').html()),
      initialize: function(options) {
        this.container = $('#' + this.model.get('startDate'));
        options.model.bind('destroy', this.remove, this);
        options.model.bind('error', this.deleteError, this);
        options.model.bind('change', this.render, this);
      },
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        this.container.append($(this.el));
        return this;
      },
      events: {
        'click': 'handleClick'
      },
      handleClick: function(e) {
        if ($(e.target).hasClass('delete'))
          return this.handleDelete(e);

        return this.handleEdit(e);
      },
      handleDelete: function(e) {
        console.log("deleteClick");

        e.stopPropagation();
        this.model.destroy();
      },
      handleEdit: function(e) {
        console.log("editClick");
        e.stopPropagation();

        var edit_view = new AppointmentEditView({
          el: $('#edit-dialog').parent(),
          model: this.model
        });
        edit_view.render();
      },
      deleteError: function(model, error) {
        // TODO: blame the user instead of the programmer...
        if (error.status == 409) {
          alert("This site does not understand CouchDB revisions.");
        }
        else {
          alert("This site was made by an idiot.");
        }
      },
      remove: function() {
        $(this.el).remove();
      }
    });

    window.AppointmentEditView = Backbone.View.extend({
      // el: $('#edit-dialog'),
      render: function () {
        $('.ui-dialog-content', this.el).dialog('open');

        $('.startDate', this.el).
          html(this.model.get("startDate"));
        $('.title', this.el).
          val(this.model.get("title"));
        $('.description', this.el).
          val(this.model.get("description"));
      },
      events : {
        'click .ok': 'update'
      },
      update: function() {
        this.model.save({
          title: $('.title').val(),
          description: $('.description').val()
        });
      }
    });

    Appointments.fetch({success: function(collection, response) {
        collection.each(function(appointment) {
          var view = new AppointmentView({model: appointment});
          view.render();
        });
      }
    });

    window.DayView = Backbone.View.extend({
      events : {
        'click': 'addClick'
      },
      addClick: function(e) {
        console.log("addClick");

        $('#add-dialog').
          dialog('open').
          find('.startDate').
          html(this.el.id);
      }
    });

    $('#calendar td').each(function() {
      new DayView({el: this});
    });

    window.AppView = Backbone.View.extend({
      el: $("#add-dialog").parent(),
      events: {
        'click .ok':  'create'
      },
      create: function() {
        var appointment = Appointments.create({
          title: this.el.find('input.title').val(),
          description: this.el.find('input.description').val(),
          startDate: this.el.find('.startDate').html()
        });

        var view = new AppointmentView({model: appointment});
        view.render();
      }
    });

    window.AppView = new AppView;
  });

|<script type="text/template" id="calendar-appointment-template">
|  <span class="appointment" title="<%= description %>">
|      <%= title %>
|      <span class="delete">X</span>
|  </span>
|</script>

