h1
  = title
  span.year-and-month

table#calendar
  thead
    tr
      th S
      th M
      th T
      th W
      th T
      th F
      th S
  tr#week0
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week1
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week2
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week3
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week4
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday
  tr#week5
    td.sunday
    td.monday
    td.tuesday
    td.wednesday
    td.thursday
    td.friday
    td.saturday

#add-dialog(title="Add calendar appointment")
  h2.startDate
  p title
  p
    input.title(type="text", name="title")
  p description
  p
    input.description(type="text", name="description")

script
  $(function() {
    $('#add-dialog').dialog({
      autoOpen: false,
      modal: true,
      buttons: [
        { text: "OK",
          class: "ok",
          click: function() { $(this).dialog("close"); } },
        { text: "Cancel",
          click: function() { $(this).dialog("close"); } }
      ]
    });
  });

#edit-dialog(title="Edit calendar appointment")
  h2.startDate
  p title
  p
    input.title(type="text", name="title")
  p description
  p
    input.description(type="text", name="description")

script
  $(function() {
    $('#edit-dialog').dialog({
      autoOpen: false,
      modal: true,
      buttons: [
        { text: "OK",
          class: "ok",
          click: function() { $(this).dialog("close"); } },
        { text: "Cancel",
          click: function() { $(this).dialog("close"); } }
      ]
    });
  });

script
  $(function() {
    var today = new Date(),
        year = today.getFullYear(),
        month = today.getMonth() + 1;
    draw_calendar(year + '-' + month)
  });

  function ISODateString(d) {
    function pad(n) {return n<10 ? '0'+n : n}
    return d.getFullYear()+'-'
      + pad(d.getMonth()+1)+'-'
      + pad(d.getDate())
  }

  function draw_calendar(year_and_month) {
    $('.year-and-month', 'h1').html(' (' + year_and_month + ') ');
    reset_calendar();
    add_dates_to_calendar(year_and_month);
  };

  function reset_calendar() {
    $('td', '#calendar').
      removeClass("other-month").
      html("");

    $('#week5').show();
  };

  function add_dates_to_calendar(year_and_month) {
    var year = parseInt(year_and_month.split(/\\D/)[0], 10),
        month = parseInt(year_and_month.split(/\\D/)[1], 10) - 1,
        firstOfTheMonth = new Date(year, month, 1),
        firstSunday = new Date(firstOfTheMonth.getTime() -
                               firstOfTheMonth.getDay()*24*60*60*1000);

    var date = firstSunday;
    _([0,1,2,3,4,5]).each(function(week) {
      var week_el = $('#week' + week),
          day_elements = week_el.find('td');

      _([0,1,2,3,4,5,6]).each(function(day) {
        var day_element = day_elements[day],
            other_month = (date.getMonth() != month),
            html = '<span class="day-of-month">' + date.getDate() + '</span>';

        $(day_element).
          html(html).
          attr('id', ISODateString(date)).
          addClass(other_month ? 'other-month' : '');

        date = new Date(date.getTime() + 24*60*60*1000);
      });
    });

    // remove whole week from next month
    var week5_other_month = _($('#week5').find('td')).all(function(el) {
      return $(el).hasClass('other-month')
    });
    if (week5_other_month) { $('#week5').hide() }
  }

script
  $(function() {
    var Cal = function() {
      var Models = (function() {
        var Appointment = Backbone.Model.extend({
          urlRoot : '/appointments',
          initialize: function(attributes) {
            if (!this.id)
              this.id = attributes['_id'];
          },
          save: function(attributes, options) {
            options || (options = {});
            options['headers'] = {'If-Match': this.get("rev")};
            Backbone.Model.prototype.save.call(this, attributes, options);
          },
          destroy: function() {
            Backbone.Model.prototype.destroy.call(this, {
              headers: {'If-Match': this.get("rev")}
            });
          },
          get: function(attribute) {
            return Backbone.Model.prototype.get.call(this, "_" + attribute) ||
                   Backbone.Model.prototype.get.call(this, attribute);
          }
        });

        return {Appointment: Appointment};
      })();

      var Collections = (function() {
        var Appointments = Backbone.Collection.extend({
          model: Models.Appointment,
          initialize: function(options) {
            options || (options = {});
            this.date = options.date;
          },
          url: function () {
            return '/appointments/' + this.date;
          },
          setDate: function(date) {
            this.date = date;
            this.fetch();
          },
          getDate: function() {
            return this.date;
          },
          parse: function(response) {
            return _(response.rows).map(function(row) { return row.value ;});
          }
        });

        return {Appointments: Appointments};
      })();

      var Views = (function() {
        var Appointment = Backbone.View.extend({
          template: _.template($('#calendar-appointment-template').html()),
          initialize: function(options) {
            this.container = $('#' + this.model.get('startDate'));
            options.model.bind('destroy', this.remove, this);
            options.model.bind('error', this.deleteError, this);
            options.model.bind('change', this.render, this);
          },
          render: function() {
            $(this.el).html(this.template(this.model.toJSON()));
            this.container.append($(this.el));
            return this;
          },
          events: {
            'click': 'handleClick'
          },
          handleClick: function(e) {
            if ($(e.target).hasClass('delete'))
              return this.handleDelete(e);

            return this.handleEdit(e);
          },
          handleDelete: function(e) {
            console.log("deleteClick");

            e.stopPropagation();
            this.model.destroy();
          },
          handleEdit: function(e) {
            console.log("editClick");
            e.stopPropagation();

            AppointmentEdit.reset({model: this.model});
          },
          deleteError: function(model, error) {
            // TODO: blame the user instead of the programmer...
            if (error.status == 409) {
              alert("This site does not understand CouchDB revisions.");
            }
            else {
              alert("This site was made by an idiot.");
            }
          },
          remove: function() {
            $(this.el).remove();
          }
        });

        var AppointmentEdit = new (Backbone.View.extend({
          el: $('#edit-dialog').parent(),
          reset: function(options) {
            this.model = options.model;
            this.render();
          },
          render: function () {
            $('.ui-dialog-content', this.el).dialog('open');

            $('.startDate', this.el).
              html(this.model.get("startDate"));
            $('.title', this.el).
              val(this.model.get("title"));
            $('.description', this.el).
              val(this.model.get("description"));
          },
          events : {
            'click .ok': 'update'
          },
          update: function() {
            var options = {
              title: $('.title', '#edit-dialog').val(),
              description: $('.description', '#edit-dialog').val()
            }
            this.model.save(options);
          }
        }));

        var AppointmentAdd = new (Backbone.View.extend({
          el: $("#add-dialog").parent(),
          reset: function(options) {
            this.startDate = options.startDate;
            this.render();
          },
          render: function () {
            $('.ui-dialog-content', this.el).dialog('open');

            $('.startDate', this.el).html(this.startDate);
            $('.title', this.el).val("");
            $('.description', this.el).val("");
          },
          events: {
            'click .ok':  'create'
          },
          create: function() {
            appointment_collection.create({
              title: this.el.find('input.title').val(),
              description: this.el.find('input.description').val(),
              startDate: this.el.find('.startDate').html()
            });
          }
        }));

        var Day = Backbone.View.extend({
          events : {
            'click': 'addClick'
          },
          addClick: function(e) {
            console.log("addClick");

            AppointmentAdd.reset({startDate: this.el.id});
          }
        });

        var CalendarNavigation = Backbone.View.extend({
          events: {
            'a:click': 'preventDefault',
            'click .previous': 'handlePrevious',
            'click .next': 'handleNext'
          },
          preventDefault: function(e) { e.preventDefault(); },
          handlePrevious: function() {
            console.log("[handlePrevious]");
            var date = Helpers.previousMonth(appointments.getDate());
            draw_calendar(date);
            appointments.setDate(date);
          },
          handleNext: function () {
            console.log("[handleNext]");
            var date = Helpers.nextMonth(appointments.getDate());
            draw_calendar(date);
            appointments.setDate(date);
          },
          render: function() {
            this.el.html(
              '<div class="previous"><a href="#">previous</a></div>' +
              '<div class="next"><a href="#">next</a></div>'
            );
            this.el.find("a").bind('click', function(e) {e.preventDefault();});
            return this;
          }
        });

        var Application = Backbone.View.extend({
          initialize: function(options) {
            this.collection = appointment_collection = options.collection;

            this.initialize_appointment_views();
            this.initialize_day_views();
            this.initialize_navigation();
          },
          initialize_appointment_views: function() {
            this.collection.
              bind('add', _.bind(this.render_appointment, this));
            this.collection.
              bind('reset', _.bind(this.render_appointment_list, this));
          },
          initialize_day_views: function() {
            $('#calendar td').each(function() {
              new Day({el: this});
            });
          },
          initialize_navigation : function() {
            $('#calendar').append('<div id="calendar-navigation">');

            var nav = new CalendarNavigation({el: $('#calendar-navigation')});
            nav.render();
          },
          render_appointment: function(appointment) {
            var view = new Appointment({model: appointment});
            view.render();
          },
          render_appointment_list: function(list) {
            list.each(this.render_appointment);
          }
        });

        return {Application: Application};
      })();

      var Helpers = (function() {
        function pad(n) {return n<10 ? '0'+n : n}

        function to_iso8601(date) {
          var year = date.getFullYear(),
              month = date.getMonth() + 1,
              day = date.getDate();

          return year + '-' + pad(month) + '-' + pad(day);
        }

        function from_iso8601(date) {
          var parts = date.split(/\\D+/),
              year = parseInt(parts[0]),
              month = parseInt(parts[1], 10),
              day = parseInt(parts[2] || 1, 10);

          return new Date(year, month-1, day);
        }

        function firstOfTheMonth(date) {
          var parts = date.split(/\\D/),
              year = parseInt(parts[0], 10),
              month = parseInt(parts.split(/\\D/)[1], 10);
              firstOfTheMonth = new Date(year, month, 1);

          return to_iso8601(firstOfTheMonth);
        }

        function previousMonth(month) {
          var date = from_iso8601(month),
              msInDay = 24*60*60*1000,
              msThisMonth = date.getDate()*msInDay,
              dateInPreviousMonth = new Date(date - msThisMonth - msInDay);

          return to_iso8601(dateInPreviousMonth).substr(0,7);
        }

        function nextMonth(month) {
          var date = from_iso8601(month),
              msInDay = 24*60*60*1000,
              msThisMonth = date.getDate()*msInDay,
              dateInNextMonth = new Date(date - msThisMonth + 32*msInDay);

          return to_iso8601(dateInNextMonth).substr(0,7);
        }

        return {
          to_iso8601: to_iso8601,
          previousMonth: previousMonth,
          nextMonth: nextMonth
        };
      })();


      // Initialize the app
      var year_and_month = Helpers.to_iso8601(new Date()).substr(0,7),
          appointments = new Collections.Appointments({date: year_and_month});

      new Views.Application({collection: appointments});

      appointments.fetch();

      return {
        Models: Models,
        Collections: Collections,
        Views: Views,
        Helpers: Helpers,
        appointments: appointments
      };
    };


    window.calendar = new Cal();
  });

|<script type="text/template" id="calendar-appointment-template">
|  <span class="appointment" title="<%= description %>">
|      <%= title %>
|      <span class="delete">X</span>
|  </span>
|</script>

